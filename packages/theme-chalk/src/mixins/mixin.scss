// 声明公共的sass方法
@use 'config' as *;
@forward 'config';
/**
  * block class name
  * @param {string} $block - 必选 (@include block('block') -> .dk-block) 
  * @prefix {string} > 是否添加到跟元素 - 可选 (@include block('block') -> .xxx .xxx .dk-block) | (@include block('>block') -> .dk-block)
  * @prefix {string} * 是否继承父级类名 - 可选 (@include block('*block') -> .dk-block) ｜ @include block('block') -> .&-block
  * @param {string} $namespace - 可选
  * @return {string} .namespace-block
  */
@mixin block($block, $namespace: $namespace) {
  @if isList($block) {
    @each $item in $block {
      $B: handleBlock($item, $namespace);
      @if isAtRoot($item) {
        $blo: str-slice($item, 2, str-length($item));
        $B: handleBlock($blo, $namespace);
        #{$B} {
          @content;
        }
      } @else {
        @at-root {
          #{$B} {
            @content;
          }
        }
      }
    }
  } @else {
    $B: handleBlock($block, $namespace);
    @if isAtRoot($block) {
      $blo: str-slice($block, 2, str-length($block));
      $B: handleBlock($blo, $namespace);
      #{$B} {
        @content;
      }
    } @else {
      @at-root {
        #{$B} {
          @content;
        }
      }
    }
  }
}

// peerBlock class name
@mixin peerBlock($peerBlock) {
  $E: '';
  @if type-of($peerBlock) == list {
    @each $item in $peerBlock {
      $E: $common-separator + $item;
      @at-root {
        &#{$E} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      $E: $common-separator + $peerBlock;
      &#{ $E } {
        @content;
      }
    }
  }
}

/**
  * element class name
  * @param {string} $element - 必选 (@include element('element')
  * @prefix {string} > 是否添加到跟元素 - 可选 (@include element('element') -> .xxx .xxx .dk-element) | (@include element('>element') -> .dk-element)
  * @prefix {string} * 是否继承父级类名 - 可选 (@include element('*element') -> .dk-element) ｜ @include element('element') -> .&_element
  * @param {string} $block
  * @return {string} &__element
  */
@mixin element($element, $block: '') {
  @if isList($element) {
    @each $item in $element {
      $E: handleElement($item, $block, $element-separator);
      @if isAtRoot($item) {
        $ele: str-slice($item, 2, str-length($item));
        $E: handleElement($ele, $block, $element-separator);
        #{$E} {
          @content;
        }
      } @else {
        @at-root {
          #{$E} {
            @content;
          }
        }
      }
    }
  } @else {
    $E: handleElement($element, $block, $element-separator);
    @if isAtRoot($element) {
      $ele: str-slice($element, 2, str-length($element));
      $E: handleElement($ele, $block, $element-separator);
      #{$E} {
        @content;
      }
    } @else {
      @at-root {
        #{$E} {
          @content;
        }
      }
    }
  }
}

/**
  * modifier class name
  * @param {string} $modifier - 必选 (@include modifier('modifier') -> &--modifier
  * @prefix {string} > 是否添加到跟元素 - 可选 (@include modifier('modifier') -> .xxx .xxx .dk-modifier) | (@include modifier('>modifier') -> .dk-modifier)
  * @prefix {string} * 是否继承父级类名 - 可选 (@include modifier('*modifier') -> .dk-modifier) ｜ @include modifier('modifier') -> &--modifier
  * @return {string} &--modifier
  */
@mixin modifier($modifier) {
  $M: handleModifier($modifier, $modifier-separator);
  @if isAtRoot($modifier) {
    $mod: str-slice($modifier, 2, str-length($modifier));
    $M: handleModifier($mod, $modifier-separator);
    @debug $M;
    #{$M} {
      @content;
    }
  } @else {
    @at-root {
      #{$M} {
        @content;
      }
    }
  }
}
// state class name
@mixin state($state) {
  $S: $state-prefix + $state;
  .#{$S} {
    @content;
  }
}

/** 
  * @name handleClassName 生成class选择器
  * @param {string} $className - 必选 需要生成的类名
  * @param {string} $separator - 必选 分隔符
  * @param {string} $prefix - 可选 前缀
  * @param {string} $namespace - 可选 命名空间
  * @return {string} .namespace-block__element--modifier  
  还没思路 改天写 上面的bem太low了 
*/  
// @mixin handleClassName($className, $separator, $prefix: '', $namespace: $namespace) {
//   // 1. 验证是否为列表
//   // 2. 验证前缀是否存在
//     // 2.1 > 是否添加到跟元素
//     // 2.2 * 是否继承父级类名
//   // 

// }

/** 
  * @name isAtRoot
  * @param {string} $str - 必选
  * @description 检测字符串是否以>开头
  * @return {boolean} - true | false
*/
@function isAtRoot($str) {
  // @debug type-of($value: $str)$str;
  @return str-index($str, '>') == 1;
}

/**
  * 检测是否为列表
  * @param {any} $list
  */
@function isList($list) {
  @return type-of($list) == list;
}

/**
    * 检测字符串时候含有指定字符
    * @param {String} $str - 字符串
    * @param {String} $symbol - 指定字符
    * @param {Number} $index - 指定字符的索引
    */
@function containSymbol($str, $symbol, $index: 1) {
  @return str-index($str, $symbol) == $index;
}

/**
    * @param {String} $block - 块名
    * @param {String} $namespace - 命名空间
    * @param {String} $common-separator - 块名分隔符
    * @return {String} - 块名
    * @example
    * @include handleBlock('button', 'dk', '-');
    */
@function handleBlock($block, $namespace: $namespace) {
  $B: '';
  @if isList($block) {
    @each $item in $block {
      $isEnd: index($block, $item) == length($block);
      $and: if($isEnd, ' ', ', ');
      $B: $B + handleBlock($item) + $and;
    }
  } @else {
    $block: unquote($block);
    $B: '';
    // @debug str-length(#{&});
    @if str-length(#{&}) == 0 {
      $B: '.' + $namespace + $common-separator + $block;
    } @else {
      @if containSymbol($block, '*') {
        $index: str-index($block, '*');
        $BL: str-slice($block, 1, $index - 1) + str-slice($block, $index + 1);
        $B: '.' + $namespace + $common-separator + $BL;
      } @else {
        $B: #{&} + $common-separator + $block;
      }
    }
  }
  @return $B;
}

/**
    * @param {String} $element - 元素名
    * @param {String} $namespace - 命名空间
    * @param {String} $element-separator - 元素分隔符
    * @return {String} - 元素名
    * @example
    * @include handleElement('icon', 'dk', '__');
  */
@function handleElement($element, $block: '', $element-separator: $element-separator) {
  $E: '';
  @if isList($element) {
    @each $item, $index in $element {
      $isEnd: index($element, $item) == length($element);
      $and: if($isEnd, ' ', ', ');
      $E: $E + handleElement($item) + $and;
    }
  } @else {
    $element: unquote($element);
    $E: '';
    // @debug str-length(#{&});
    @if str-length(#{&}) == 0 {
      $E: '.' + $namespace + $element-separator + $element;
    } @else {
      @if containSymbol($element, '*') {
        $index: str-index($element, '*');
        $EL: str-slice($element, 1, $index - 1) + str-slice($element, $index + 1);
        $E: '.' + $namespace + $element-separator + $EL;
      } @else {
        $E: #{&} + $element-separator + $element;
      }
    }
  }
  @return $E;
}

/**
    * @param {String} $modifier - 修饰符
    * @param {String} $namespace - 命名空间
    * @param {String} $modifier-separator - 修饰符分隔符
    * @return {String} - 修饰符
    * @example
    * @include handleModifier('primary', 'dk', '--');
  */
@function handleModifier(
  $modifier,
  $namespace: $namespace,
  $modifier-separator: $modifier-separator
) {
  $M: '';
  @if isList($modifier) {
    @each $item in $modifier {
      $isEnd: index($modifier, $item) == length($modifier);
      $and: if($isEnd, ' ', ', ');
      $M: $M + handleModifier($item) + $and;
    }
  } @else {
    $modifier: unquote($modifier);
    $M: '';
    // @debug str-length(#{&});
    @if str-length(#{&}) == 0 {
      $M: '.' + $namespace + $modifier-separator + $modifier;
    } @else {
      @if containSymbol($modifier, '*') {
        $index: str-index($modifier, '*');
        $ML: str-slice($modifier, 1, $index - 1) + str-slice($modifier, $index + 1);
        $M: '.' + $namespace + $modifier-separator + $ML;
      } @else {
        $M: #{&} + $modifier-separator + $modifier;
      }
    }
  }
  @return $M;
}
/**
   * 检测是否为颜色
   * @param {any} $color
  */
@function isColor($color) {
  @return type-of($color) == 'color';
}
