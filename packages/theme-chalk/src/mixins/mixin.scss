// 声明公共的sass方法

@use './configuration/dkButtonConfig.scss' as *;
@forward './configuration/dkButtonConfig.scss';

@use 'inputconfig' as *;
@forward 'inputconfig';

@use 'config' as *;
@forward 'config';

@use 'func' as *;
@forward 'func';

// block class name
@mixin block($block) {
  $B: '';
  @if type-of($block) == list {
    @each $item in $block {
      @include block($item) {
        @content;
      }
    }
  } @else {
    $block: unquote($block);
    $B: '';
    // @debug str-length(#{&});
    @if str-length(#{&}) == 0 {
      $B: $namespace + $common-separator + $block;
      .#{$B} {
        @content;
      }
    } @else {
      @if str-index($block, '*') == 1 {
        $index: str-index($block, '*');
        $BL: str-slice($block, 1, $index - 1) + str-slice($block, $index + 1);
        $B: '.' + $namespace + $common-separator + $BL;
      } @else {
        $B: #{&} + $common-separator + $block;
      }
      @at-root {
        #{$B} {
          @content;
        }
      }
    }
  }
}

// peerBlock class name
@mixin peerBlock($peerBlock) {
  $E: '';
  @if type-of($peerBlock) == list {
    @each $item in $peerBlock {
      $E: $common-separator + $item;
      @at-root {
        &#{$E} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      $E: $common-separator + $peerBlock;
      &#{ $E } {
        @content;
      }
    }
  }
}

// element class name
@mixin element($element) {
  // element
  $E: '';
  @if type-of($element) == list {
    @each $item in $element {
      @include element($item) {
        @content;
      }
    }
  } @else {
    @if str-index($element, '*') == 1 {
      $index: str-index($element, '*');
      $EL: str-slice($element, 1, $index - 1) + str-slice($element, $index + 1);
      $E: $element-separator + $EL;
    } @else {
      $E: $element-separator + $element;
    }
    @at-root {
      &#{ $E } {
        @content;
      }
    }
  }
}

// modifier class name
@mixin modifier($modifier) {
  @if type-of($modifier) == list {
    @each $item in $modifier {
      @include modifier($item) {
        @content;
      }
    }
  } @else {
    $M: '';
    @if str-index($modifier, '*') == 1 {
      $index: str-index($modifier, '*');
      $ML: str-slice($modifier, 1, $index - 1) + str-slice($modifier, $index + 1);
      $M: $modifier-separator + $ML;
    } @else {
      $M: $modifier-separator + $modifier;
    }
    @at-root {
      &#{ $M } {
        @content;
      }
    } 
  }
}
// state class name
@mixin state($state) {
  $S: $state-prefix + $state;
  .#{$S} {
    @content;
  }
}
